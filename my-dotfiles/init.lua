-- --[[
-- -- cool https://github.com/echasnovski/mini.nvim
-- -- cool folke/todo-comments.nvim
-- --should i help https://github.com/rafamadriz/friendly-snippets
-- --:help lspconfig-all
-- --what is inlay hints
-- --  To jump back, press <C-t>.
-- --  `opts = {}` is the same as calling `require('fidget').setup({})`
-- :Telescope help_tags
-- Use `opts = {}` to force a plugin to be loaded.
-- :help lua-guide-autocommands
-- :help lazy.nvim.txt
-- <space>sh
-- :checkhealth
-- --]]
-- -- set <space> as the leader key must happen before plugins are loaded (otherwise wrong leader will be used)
vim.g.mapleader = ' '
vim.g.maplocalleader = ' '
--
-- trying to solve the arabic fonts problem
-- right to left
vim.keymap.set('n', '<leader>lr', 
function()
  vim.cmd[[
    set arabic
    set arabicshape
    set rl
    set guifont=Noto\ Naskh\ Arabic:h10
  ]]
end)

-- left to right
vim.keymap.set('n', '<leader>rl', 
function()
  vim.cmd[[
    set noarabic
    set noarabicshape
    set norl
    if exists("g:neovide")
      set guifont=JetBrainsMono\ Nerd\ Font\ Mono:h10
    endif
  ]]
end)

vim.cmd[[
" only for neovide
if exists("g:neovide")
  set guifont=JetBrainsMono\ Nerd\ Font\ Mono:h10
endif

nnoremap <leader>yf meggVG"+y`e
]]

-- -- INFO:: anything with info is my custom
vim.cmd.colorscheme 'desert'
-- jk as esc
vim.api.nvim_set_keymap('i', 'jk', '<Esc>', {})
-- H as g^
vim.api.nvim_set_keymap('n', 'H', 'g^', {})
vim.api.nvim_set_keymap('v', 'H', 'g^', {})
vim.api.nvim_set_keymap('x', 'H', 'g^', {})
-- L as g$
vim.api.nvim_set_keymap('n', 'L', 'g$', {})
vim.api.nvim_set_keymap('v', 'L', 'g$', {})
vim.api.nvim_set_keymap('x', 'L', 'g$', {})
-- ZX as ZQ
vim.api.nvim_set_keymap('x', 'ZX', 'ZQ', {})
vim.api.nvim_set_keymap('v', 'ZX', 'ZQ', {})
vim.api.nvim_set_keymap('n', 'ZX', 'ZQ', {})
-- leader p v = netRW
vim.keymap.set('n', '<leader>pv', vim.cmd.Ex)
-- idk what is diff between { vim.api.nvim_set_keymap & vim.keymap.set }

-- INFO: wrap
vim.wo.wrap = true
vim.wo.linebreak = false

-- write vimscript inside init.lua
-- -- Set to true if you have a Nerd Font ynstalled and selected in the terminal
-- -- vim.g.have_nerd_font = false
-- vim.g.have_nerd_font = true
--
-- OPTIONS: Make line numbers default
vim.opt.number = true
vim.opt.relativenumber = true

-- Enable mouse mode
vim.opt.mouse = 'a'
vim.opt.clipboard = 'unnamedplus'

-- -- just-fancy Don't show the mode, since it's already in the status line
-- vim.opt.showmode = false
--
-- -- Sync clipboard between OS and Neovim. Schedule the setting after `UiEnter` because it can increase startup-time.
-- vim.schedule(function()
--   vim.opt.clipboard = 'unnamedplus'
-- end)
--
-- -- better-for-eyes Enable break indent
-- vim.opt.breakindent = true
--
-- -- Save undo history
-- vim.opt.undofile = true
--
-- -- Case-insensitive searching UNLESS using \C or capital letters
vim.opt.ignorecase = true
vim.opt.smartcase = true
--
-- -- Keep signcolumn on by default
-- vim.opt.signcolumn = 'yes'
--
-- -- Decrease update time
-- vim.opt.updatetime = 250
--
-- -- Decrease mapped sequence wait time
-- -- Displays which-key popup sooner
-- vim.opt.timeoutlen = 300
--
-- -- Configure how new splits should be opened
-- vim.opt.splitright = true
-- vim.opt.splitbelow = true
--
-- -- Sets how neovim will display certain whitespace characters in the editor.
-- --  See `:help 'list'`
-- --  and `:help 'listchars'`
-- vim.opt.list = true
-- vim.opt.listchars = { tab = '» ', trail = '·', nbsp = '␣' }
--
-- -- Preview substitutions live, as you type!
-- vim.opt.inccommand = 'split'
--
-- -- Show which line your cursor is on
-- vim.opt.cursorline = true
--
-- -- Minimal number of screen lines to keep above and below the cursor.
-- vim.opt.scrolloff = 5
--
-- -- [[ Basic Keymaps ]]
-- --  See `:help vim.keymap.set()`
--
-- -- Clear highlights on search when pressing <Esc> in normal mode
-- --  See `:help hlsearch`
vim.keymap.set('n', '<Esc>', '<cmd>nohlsearch<CR>')
--
-- -- Diagnostic keymaps
-- vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist, { desc = 'Open diagnostic [Q]uickfix list' }) --idk
--
-- -- Exit terminal mode in the builtin terminal with a shortcut that is a bit easier
-- -- for people to discover. Otherwise, you normally need to press <C-\><C-n>, which
-- -- is not what someone will guess without a bit more experience.
-- --
-- -- NOTE: This won't work in all terminal emulators/tmux/etc. Try your own mapping
-- -- or just use <C-\><C-n> to exit terminal mode
-- vim.keymap.set('t', '<Esc><Esc>', '<C-\\><C-n>', { desc = 'Exit terminal mode' })
--
-- -- TIP: Disable arrow keys in normal mode
-- vim.keymap.set('n', '<left>', '<cmd>echo "Use h to move!!"<CR>')
-- vim.keymap.set('n', '<right>', '<cmd>echo "Use l to move!!"<CR>')
-- vim.keymap.set('n', '<up>', '<cmd>echo "Use k to move!!"<CR>')
-- vim.keymap.set('n', '<down>', '<cmd>echo "Use j to move!!"<CR>')
--
-- -- Keybinds to make split navigation easier.
-- --  Use ctrl hjkl to switch between windows
--
-- vim.keymap.set('n', '<C-h>', '<C-w><C-h>', { desc = 'Move focus to the left window' })
-- vim.keymap.set('n', '<C-l>', '<C-w><C-l>', { desc = 'Move focus to the right window' })
-- vim.keymap.set('n', '<C-j>', '<C-w><C-j>', { desc = 'Move focus to the lower window' })
-- vim.keymap.set('n', '<C-k>', '<C-w><C-k>', { desc = 'Move focus to the upper window' })
--
-- -- [[ Basic Autocommands ]]
--
-- Highlight when yanking (copying) text
vim.api.nvim_create_autocmd('TextYankPost', {
  desc = 'Highlight when yanking (copying) text',
  group = vim.api.nvim_create_augroup('kickstart-highlight-yank', { clear = true }),
  callback = function()
    vim.highlight.on_yank()
  end,
})
--
-- -- [[ Install `lazy.nvim` plugin manager ]]
-- local lazypath = vim.fn.stdpath 'data' .. '/lazy/lazy.nvim'
-- if not (vim.uv or vim.loop).fs_stat(lazypath) then
--   local lazyrepo = 'https://github.com/folke/lazy.nvim.git'
--   local out = vim.fn.system { 'git', 'clone', '--filter=blob:none', '--branch=stable', lazyrepo, lazypath }
--   if vim.v.shell_error ~= 0 then
--     error('Error cloning lazy.nvim:\n' .. out)
--   end
-- end ---@diagnostic disable-next-line: undefined-field
-- vim.opt.rtp:prepend(lazypath)
--
-- -- [[ Configure and install plugins ]]
-- --  You can press `?` in this menu for help. Use `:q` to close the window
-- --
-- --  To update plugins you can run
-- --    :Lazy update
-- --
-- -- NOTE: Here is where you install your plugins.
-- require('lazy').setup({
--   -- NOTE: Plugins can be added with a link (or for a github repo: 'owner/repo' link).
--   'tpope/vim-sleuth', -- Detect tabstop and shiftwidth automatically
--
--   -- NOTE: Plugins can also be added by using a table,
--   -- with the first argument being the link and the following keys can be used to configure plugin behavior/loading/etc.
--
--   -- See `:help gitsigns` to understand what the configuration keys do
--   { -- Adds git related signs to the gutter, as well as utilities for managing changes
--     'lewis6991/gitsigns.nvim',
--     opts = {
--       signs = {
--         add = { text = '+' },
--         change = { text = '~' },
--         delete = { text = '_' },
--         topdelete = { text = '‾' },
--         changedelete = { text = '~' },
--       },
--     },
--   },
--
--   { -- Useful plugin to show you pending keybinds.
--     'folke/which-key.nvim',
--     event = 'VimEnter', -- Sets the loading event to 'VimEnter'
--     opts = {
--       icons = {
--         -- set icon mappings to true if you have a Nerd Font
--         mappings = vim.g.have_nerd_font,
--         -- If you are using a Nerd Font: set icons.keys to an empty table which will use the
--         -- default whick-key.nvim defined Nerd Font icons, otherwise define a string table
--         keys = vim.g.have_nerd_font and {} or {
--           Up = '<Up> ',
--           Down = '<Down> ',
--           Left = '<Left> ',
--           Right = '<Right> ',
--           C = '<C-…> ',
--           M = '<M-…> ',
--           D = '<D-…> ',
--           S = '<S-…> ',
--           CR = '<CR> ',
--           Esc = '<Esc> ',
--           ScrollWheelDown = '<ScrollWheelDown> ',
--           ScrollWheelUp = '<ScrollWheelUp> ',
--           NL = '<NL> ',
--           BS = '<BS> ',
--           Space = '<Space> ',
--           Tab = '<Tab> ',
--           F1 = '<F1>',
--           F2 = '<F2>',
--           F3 = '<F3>',
--           F4 = '<F4>',
--           F5 = '<F5>',
--           F6 = '<F6>',
--           F7 = '<F7>',
--           F8 = '<F8>',
--           F9 = '<F9>',
--           F10 = '<F10>',
--           F11 = '<F11>',
--           F12 = '<F12>',
--         },
--       },
--
--       -- Document existing key chains
--       spec = {
--         { '<leader>c', group = '[C]ode', mode = { 'n', 'x' } },
--         { '<leader>d', group = '[D]ocument' }, -- really cool
--         { '<leader>r', group = '[R]ename' }, -- really cool
--         { '<leader>s', group = '[S]earch' },
--         { '<leader>w', group = '[W]orkspace' }, -- idk
--         { '<leader>t', group = '[T]oggle' },
--         { '<leader>h', group = 'Git [H]unk', mode = { 'n', 'v' } },
--       },
--     },
--   },
--
--   { -- Fuzzy Finder (files, lsp, etc)
--     'nvim-telescope/telescope.nvim',
--     event = 'VimEnter',
--     branch = '0.1.x',
--     dependencies = {
--       'nvim-lua/plenary.nvim',
--       { -- If encountering errors, see telescope-fzf-native README for installation instructions
--         'nvim-telescope/telescope-fzf-native.nvim',
--
--         build = 'make',
--
--         cond = function()
--           return vim.fn.executable 'make' == 1
--         end,
--       },
--       { 'nvim-telescope/telescope-ui-select.nvim' },
--
--       -- Useful for getting pretty icons, but requires a Nerd Font.
--       { 'nvim-tree/nvim-web-devicons', enabled = vim.g.have_nerd_font },
--     },
--     config = function()
--       -- [[ Configure Telescope ]]
--       require('telescope').setup {
--         -- idk
--         -- defaults = {
--         --   mappings = {
--         --     i = { ['<c-enter>'] = 'to_fuzzy_refine' },
--         --   },
--         -- },
--         -- pickers = {}
--         extensions = {
--           ['ui-select'] = {
--             require('telescope.themes').get_dropdown(),
--           },
--         },
--       }
--
--       -- Enable Telescope extensions if they are installed
--       pcall(require('telescope').load_extension, 'fzf')
--       pcall(require('telescope').load_extension, 'ui-select')
--
--       -- See `:help telescope.builtin`
--       local builtin = require 'telescope.builtin'
--       vim.keymap.set('n', '<leader>sh', builtin.help_tags, { desc = '[S]earch [H]elp' }) --cool
--       vim.keymap.set('n', '<leader>sk', builtin.keymaps, { desc = '[S]earch [K]eymaps' })
--       vim.keymap.set('n', '<leader>sf', builtin.find_files, { desc = '[S]earch [F]iles' })
--       vim.keymap.set('n', '<leader>ss', builtin.builtin, { desc = '[S]earch [S]elect Telescope' }) --idk
--       vim.keymap.set('n', '<leader>sw', builtin.grep_string, { desc = '[S]earch current [W]ord' }) --cool
--       vim.keymap.set('n', '<leader>sg', builtin.live_grep, { desc = '[S]earch by [G]rep' }) --idk
--       vim.keymap.set('n', '<leader>sd', builtin.diagnostics, { desc = '[S]earch [D]iagnostics' })
--       vim.keymap.set('n', '<leader>sr', builtin.resume, { desc = '[S]earch [R]esume' })
--       vim.keymap.set('n', '<leader>s.', builtin.oldfiles, { desc = '[S]earch Recent Files ("." for repeat)' }) -- omg cool
--       vim.keymap.set('n', '<leader><leader>', builtin.buffers, { desc = '[ ] Find existing buffers' })
--
--       -- Slightly advanced example of overriding default behavior and theme
--       vim.keymap.set('n', '<leader>/', function()
--         -- You can pass additional configuration to Telescope to change the theme, layout, etc.
--         builtin.current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
--           winblend = 10,
--           previewer = false,
--         })
--       end, { desc = '[/] Fuzzily search in current buffer' })
--
--       vim.keymap.set('n', '<leader>s/', function()
--         builtin.live_grep {
--           grep_open_files = true,
--           prompt_title = 'Live Grep in Open Files',
--         }
--       end, { desc = '[S]earch [/] in Open Files' })
--       -- Shortcut for searching your Neovim configuration files --idk
--       vim.keymap.set('n', '<leader>sn', function()
--         builtin.find_files { cwd = vim.fn.stdpath 'config' }
--       end, { desc = '[S]earch [N]eovim files' })
--     end,
--   },
--
--   -- LSP Plugins
--   {
--     -- `lazydev` configures Lua LSP for your Neovim config, runtime and plugins
--     -- used for completion, annotations and signatures of Neovim apis
--     'folke/lazydev.nvim',
--     ft = 'lua',
--     opts = {
--       library = {
--         -- Load luvit types when the `vim.uv` word is found
--         { path = 'luvit-meta/library', words = { 'vim%.uv' } },
--       },
--     },
--   },
--   { 'Bilal2453/luvit-meta', lazy = true },
--   {
--     -- Main LSP Configuration
--     'neovim/nvim-lspconfig',
--     dependencies = {
--       -- Automatically install LSPs and related tools to stdpath for Neovim
--       { 'williamboman/mason.nvim', config = true }, -- NOTE: Must be loaded before dependants
--       'williamboman/mason-lspconfig.nvim',
--       'WhoIsSethDaniel/mason-tool-installer.nvim',
--
--       -- Useful status updates for LSP.
--       { 'j-hui/fidget.nvim', opts = {} },
--
--       -- Allows extra capabilities provided by nvim-cmp
--       'hrsh7th/cmp-nvim-lsp',
--     },
--     config = function()
--       vim.api.nvim_create_autocmd('LspAttach', {
--         group = vim.api.nvim_create_augroup('kickstart-lsp-attach', { clear = true }),
--         callback = function(event)
--           local map = function(keys, func, desc, mode)
--             mode = mode or 'n'
--             vim.keymap.set(mode, keys, func, { buffer = event.buf, desc = 'LSP: ' .. desc })
--           end
--
--           map('gd', require('telescope.builtin').lsp_definitions, '[G]oto [D]efinition')
--
--           map('gr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
--
--           map('gI', require('telescope.builtin').lsp_implementations, '[G]oto [I]mplementation') --idk
--
--           map('<leader>D', require('telescope.builtin').lsp_type_definitions, 'Type [D]efinition') --type of var
--
--           map('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
--
--           map('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')
--
--           map('<leader>rn', vim.lsp.buf.rename, '[R]e[n]ame')
--
--           map('<leader>ca', vim.lsp.buf.code_action, '[C]ode [A]ction', { 'n', 'x' }) --idk
--
--           map('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')
--
--           local client = vim.lsp.get_client_by_id(event.data.client_id)
--           if client and client.supports_method(vim.lsp.protocol.Methods.textDocument_documentHighlight) then
--             local highlight_augroup = vim.api.nvim_create_augroup('kickstart-lsp-highlight', { clear = false })
--             vim.api.nvim_create_autocmd({ 'CursorHold', 'CursorHoldI' }, {
--               buffer = event.buf,
--               group = highlight_augroup,
--               callback = vim.lsp.buf.document_highlight,
--             })
--
--             vim.api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {
--               buffer = event.buf,
--               group = highlight_augroup,
--               callback = vim.lsp.buf.clear_references,
--             })
--
--             vim.api.nvim_create_autocmd('LspDetach', {
--               group = vim.api.nvim_create_augroup('kickstart-lsp-detach', { clear = true }),
--               callback = function(event2)
--                 vim.lsp.buf.clear_references()
--                 vim.api.nvim_clear_autocmds { group = 'kickstart-lsp-highlight', buffer = event2.buf }
--               end,
--             })
--           end
--
--           if client and client.supports_method(vim.lsp.protocol.Methods.textDocument_inlayHint) then
--             map('<leader>th', function()
--               vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled { bufnr = event.buf })
--             end, '[T]oggle Inlay [H]ints')
--           end
--         end,
--       })
--
--       -- Change diagnostic symbols in the sign column (gutter)
--       if vim.g.have_nerd_font then
--         local signs = { Error = '', Warn = '', Hint = '', Info = '' }
--         for type, icon in pairs(signs) do
--           local hl = 'DiagnosticSign' .. type
--           vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
--         end
--       end
--
--       local capabilities = vim.lsp.protocol.make_client_capabilities()
--       capabilities = vim.tbl_deep_extend('force', capabilities, require('cmp_nvim_lsp').default_capabilities())
--
--       local servers = {
--         clangd = {},
--         pyright = {},
--         lua_ls = {
--           -- cmd = {...},
--           -- filetypes = { ...},
--           -- capabilities = {},
--           settings = {
--             Lua = {
--               completion = {
--                 callSnippet = 'Replace',
--               },
--               -- You can toggle below to ignore Lua_LS's noisy `missing-fields` warnings
--               -- diagnostics = { disable = { 'missing-fields' } },
--             },
--           },
--         },
--       }
--
--       require('mason').setup()
--
--       local ensure_installed = vim.tbl_keys(servers or {})
--       vim.list_extend(ensure_installed, {
--         'stylua', -- Used to format Lua code
--       })
--       require('mason-tool-installer').setup { ensure_installed = ensure_installed }
--
--       require('mason-lspconfig').setup {
--         handlers = {
--           function(server_name)
--             local server = servers[server_name] or {}
--             server.capabilities = vim.tbl_deep_extend('force', {}, capabilities, server.capabilities or {})
--             require('lspconfig')[server_name].setup(server)
--           end,
--         },
--       }
--     end,
--   },
--
--   { -- Autoformat
--     'stevearc/conform.nvim',
--     event = { 'BufWritePre' },
--     cmd = { 'ConformInfo' },
--     keys = {
--       {
--         '<leader>f', --nice cool
--         function()
--           require('conform').format { async = true, lsp_format = 'fallback' }
--         end,
--         mode = '',
--         desc = '[F]ormat buffer',
--       },
--     },
--     opts = {
--       notify_on_error = false,
--       format_on_save = function(bufnr)
--         local disable_filetypes = { c = true, cpp = true } --huh? idk
--         local lsp_format_opt
--         if disable_filetypes[vim.bo[bufnr].filetype] then
--           lsp_format_opt = 'never'
--         else
--           lsp_format_opt = 'fallback'
--         end
--         return {
--           timeout_ms = 500,
--           lsp_format = lsp_format_opt,
--         }
--       end,
--       formatters_by_ft = {
--         lua = { 'stylua' },
--         -- Conform can also run multiple formatters sequentially
--         python = { 'isort', 'black' },
--         --
--         -- You can use 'stop_after_first' to run the first available formatter from the list
--         javascript = { 'prettierd', 'prettier', stop_after_first = true },
--       },
--     },
--   },
--
--   { -- Autocompletion
--     'hrsh7th/nvim-cmp',
--     event = 'InsertEnter',
--     dependencies = {
--       {
--         'L3MON4D3/LuaSnip',
--         build = (function()
--           -- Build Step is needed for regex support in snippets.
--           -- This step is not supported in many windows environments.
--           -- Remove the below condition to re-enable on windows.
--           if vim.fn.has 'win32' == 1 or vim.fn.executable 'make' == 0 then
--             return
--           end
--           return 'make install_jsregexp'
--         end)(),
--         dependencies = {
--           -- `friendly-snippets` contains a variety of premade snippets.
--           --    See the README about individual language/framework/plugin snippets:
--           --    https://github.com/rafamadriz/friendly-snippets
--           -- {
--           --   'rafamadriz/friendly-snippets',
--           --   config = function()
--           --     require('luasnip.loaders.from_vscode').lazy_load()
--           --   end,
--           -- },
--         },
--       },
--       'saadparwaiz1/cmp_luasnip',
--
--       -- Adds other completion capabilities.
--       --  nvim-cmp does not ship with all sources by default. They are split into multiple repos for maintenance purposes.
--       'hrsh7th/cmp-nvim-lsp',
--       'hrsh7th/cmp-path',
--     },
--     config = function()
--       local cmp = require 'cmp'
--       local luasnip = require 'luasnip'
--       luasnip.config.setup {}
--
--       cmp.setup {
--         snippet = {
--           expand = function(args)
--             luasnip.lsp_expand(args.body)
--           end,
--         },
--         completion = { completeopt = 'menu,menuone,noinsert' },
--
--         -- For an understanding of why these mappings were
--         -- chosen, you will need to read `:help ins-completion`
--         --
--         -- No, but seriously. Please read `:help ins-completion`, it is really good!
--         mapping = cmp.mapping.preset.insert {
--           ['<C-n>'] = cmp.mapping.select_next_item(),
--           ['<C-p>'] = cmp.mapping.select_prev_item(),
--
--           -- Scroll the documentation window [b]ack / [f]orward
--           ['<C-b>'] = cmp.mapping.scroll_docs(-4),
--           ['<C-f>'] = cmp.mapping.scroll_docs(4),
--
--           --accept selection
--           ['<C-y>'] = cmp.mapping.confirm { select = true },
--           ['<Enter>'] = cmp.mapping.confirm { select = true },
--           ['<CR>'] = cmp.mapping.confirm { select = true },
--           ['<Tab>'] = cmp.mapping.confirm { select = true },
--
--           -- Manually trigger a completion from nvim-cmp.
--           ['<C-Space>'] = cmp.mapping.complete {}, --idk
--
--           -- Think of <c-l> as moving to the right of your snippet expansion. --cool nice
--           --  So if you have a snippet that's like:
--           --  function $name($args)
--           --    $body
--           --  end
--           --
--           -- <c-l> will move you to the right of each of the expansion locations.
--           -- <c-h> is similar, except moving you backwards.
--           ['<C-l>'] = cmp.mapping(function()
--             if luasnip.expand_or_locally_jumpable() then
--               luasnip.expand_or_jump()
--             end
--           end, { 'i', 's' }),
--           ['<C-h>'] = cmp.mapping(function()
--             if luasnip.locally_jumpable(-1) then
--               luasnip.jump(-1)
--             end
--           end, { 'i', 's' }),
--         },
--         sources = {
--           {
--             name = 'lazydev',
--             group_index = 0,
--           },
--           { name = 'nvim_lsp' },
--           { name = 'luasnip' },
--           { name = 'path' },
--         },
--       }
--     end,
--   },
--
--   {
--     'folke/tokyonight.nvim',
--     priority = 1000,
--     init = function()
--       vim.cmd.colorscheme 'tokyonight-night'
--
--       -- You can configure highlights by doing something like: --huh?
--       vim.cmd.hi 'Comment gui=none'
--     end,
--   },
--
--   { 'folke/todo-comments.nvim', event = 'VimEnter', dependencies = { 'nvim-lua/plenary.nvim' }, opts = { signs = false } },
--
--   {
--     -- Collection of various small independent plugins/modules
--     'echasnovski/mini.nvim',
--     config = function()
--       require('mini.ai').setup { n_lines = 500 }
--
--       require('mini.surround').setup()
--
--       local statusline = require 'mini.statusline'
--       statusline.setup { use_icons = vim.g.have_nerd_font }
--
--       -- cursor location to LINE:COLUMN
--       ---@diagnostic disable-next-line: duplicate-set-field
--       statusline.section_location = function()
--         return '%2l:%-2v'
--       end
--     end,
--   },
--   {
--     -- Highlight, edit, and navigate code
--     'nvim-treesitter/nvim-treesitter',
--     build = ':TSUpdate',
--     main = 'nvim-treesitter.configs', -- Sets main module to use for opts
--     opts = {
--       ensure_installed = { 'bash', 'c', 'diff', 'html', 'lua', 'luadoc', 'markdown', 'markdown_inline', 'query', 'vim', 'vimdoc' },
--       auto_install = true,
--       highlight = {
--         enable = true,
--         additional_vim_regex_highlighting = { 'ruby' },
--       },
--       indent = { enable = true, disable = { 'ruby' } },
--     },
--   },
--
--   -- The following comments only work if you have downloaded the kickstart repo, not just copy pasted the
--   -- init.lua. If you want these files, they are in the repository, so you can just download them and
--   -- place them in the correct locations.
--
--   --
--   --  Here are some example plugins that I've included in the Kickstart repository.
--   --  Uncomment any of the lines below to enable them (you will need to restart nvim).
--   --
--   -- require 'kickstart.plugins.debug',
--   -- require 'kickstart.plugins.indent_line',
--   -- require 'kickstart.plugins.lint',
--   require 'kickstart.plugins.autopairs',
--   -- require 'kickstart.plugins.neo-tree',
--   -- require 'kickstart.plugins.gitsigns', -- adds gitsigns recommend keymaps
--
--   --  Uncomment the following line and add your plugins to `lua/custom/plugins/*.lua` to get going.
--   -- { import = 'custom.plugins' },
--   --
--   -- In normal mode type `<space>sh` then write `lazy.nvim-plugin`
--   -- you can continue same window with `<space>sr` which resumes last telescope search
-- }, {
--   ui = {
--     -- If you are using a Nerd Font: set icons to an empty table which will use the
--     -- default lazy.nvim defined Nerd Font icons, otherwise define a unicode icons table
--     icons = vim.g.have_nerd_font and {} or {
--       cmd = '⌘',
--       config = '🛠',
--       event = '📅',
--       ft = '📂',
--       init = '⚙',
--       keys = '🗝',
--       plugin = '🔌',
--       runtime = '💻',
--       require = '🌙',
--       source = '📄',
--       start = '🚀',
--       task = '📌',
--       lazy = '💤 ',
--     },
--   },
-- })
--
-- -- The line beneath this is called `modeline`. See `:help modeline`
-- -- vim: ts=2 sts=2 sw=2 et
--
